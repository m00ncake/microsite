{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('ezlight/tab-industries') }}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'row'
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      {# {{ content }} #}
      <div class="col-12 col-md-6 d-flex flex-column text-center text-lg-left">
        <div class="tab-content" id="myTabContent">
          <h3 class="fw-700">SMS Compliance for</h3>
          {% for tabContent in content.field_tab_industry_item|children %}
          <div class="tab-pane fade {{ loop.first ? 'show active' }}" id="tab-{{ loop.index }}" role="tabpanel" aria-labelledby="home-tab">
            <h2 class="fw-400 mt-2 mb-0">{{ tabContent["#paragraph"].field_item_title.value|raw }}</h2>
            {{ tabContent["#paragraph"].field_wysiwyg.value|raw }}
          </div>
          {% endfor %}
        </div>
        <ul class="nav nav-tabs d-flex justify-content-center justify-content-lg-start ml-n2 px-3 px-md-4 px-lg-0" id="myTab" role="tablist">
          {% for tab in content.field_tab_industry_item|children %}
          <li class="nav-item industry-tab-nav mx-1 my-1 mx-lg-2 my-lg-2" role="presentation">
            <a class="nav-link {{ loop.first ? 'active' }}" id="home-tab" data-toggle="tab" href="#tab-{{ loop.index }}" data-image="tab-image-{{ loop.index }}" role="tab" aria-controls="tab-{{ loop.index }}" aria-selected="true">{{ tab["#paragraph"].field_item_title.value|raw }}</a>
          </li>
          {% endfor %}
        </ul>
      </div>
      <div class="col-12 col-md-6 d-flex align-items-center">
      {% for tabImage in content.field_tab_industry_item|children %}
        <div id="tab-image-{{ loop.index }}" class="tab-image {{ not loop.first ? 'hidden' }}">
          {{ tabImage["#paragraph"].field_media_image|view }}
        </div>
      {% endfor %}
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %}